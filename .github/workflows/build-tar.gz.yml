name: Criar release e arquivo .tar.gz

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v2

    - name: Criar arquivo .tar.gz
      run: tar -czf chili-void-xfce-skel.tar.gz .

    - name: Salvar arquivo .tar.gz como artefato
      uses: actions/upload-artifact@v2
      with:
        name: arquivos
        path: chili-void-xfce-skel.tar.gz

    - name: Verificar e excluir release existente
      id: check_and_delete_release
      run: |
        response_code=$(curl -s -o /dev/null -w "%{http_code}" -X GET -H "Authorization: Bearer ${{ secrets.ORGANIZATION_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0.0")
        if [ "$response_code" -eq "200" ]; then
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.ORGANIZATION_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0.0"
        fi

    - name: Criar release
      if: ${{ steps.check_and_delete_release.outputs.response_code }} != '200'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0
        body: |
          Descrição do release aqui.
        draft: false
        prerelease: false

    - name: Fazer upload do arquivo .tar.gz no release
      if: ${{ steps.check_and_delete_release.outputs.response_code }} != '200'
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./chili-void-xfce-skel.tar.gz
        asset_name: chili-void-xfce-skel.tar.gz
        asset_content_type: application/gzip
